workflow  = { "workflow" ~ identifier ~ version ~ "{" ~ step+ ~ "}" ~ author_tag? ~ sticky_tag? }
step      = { "step" ~ identifier ~ "{" ~ step_body ~ "}" }
step_body = { (condition | register_operation | action | for_loop)+ }
condition = { "if" ~ expression ~ "{" ~ step_body ~ "}" }
for_loop  = { "for" ~ identifier ~ "in" ~ (split_expression | range_expression) ~ "{" ~ step_body ~ "}" }
action    = { external_fn_call | command ~ "(" ~ (param ~ ("," ~ param)*)? ~ ")" }
command   = { identifier }
param     = { string | number | boolean | identifier | register }
register  = { "$" ~ identifier }
// New rule for registers
external_fn_call   = { "call" ~ identifier ~ "(" ~ (param ~ ("," ~ param)*)? ~ ")" }
expression         = { range_expression | simple_expression ~ (comparison_operator ~ simple_expression)? }
simple_expression  = { identifier | number | boolean | string | register }
range_expression   = { identifier ~ ".." ~ identifier }
register_operation = { register ~ "=" ~ (external_fn_call | value) }
// New rule for register operations
comparison_operator =  { "==" | "!=" | ">" | "<" | ">=" | "<=" }
value               =  { string | number | boolean | identifier | register }
split_expression    =  { (register | identifier | string) ~ ".split(" ~ delimiter ~ ")" }
version             =  { "v" ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)* }
author_tag          = _{ "@" ~ "@" ~ identity }
sticky_tag          = @{ "sticky" }
identifier          = @{ (ASCII_ALPHANUMERIC | "_")+ }
identity            = @{ (ASCII_ALPHANUMERIC | "_" | "." | "-")* }
string              = _{ "\"" ~ (("\\\"" | (!"\"" ~ ANY))*) ~ "\"" }
delimiter           =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number              = _{ ASCII_DIGIT+ }
boolean             =  { "true" | "false" }
WHITESPACE          = _{ " " | "\t" | "\n" | "\r" }
