use crate::tools::argument::ToolArgument;
use crate::tools::error::ToolError;
use lazy_static::lazy_static;
use shinkai_vector_resources::embeddings::Embedding;
use std::collections::HashMap;

// TODO: Have the node generate embeddings and save rust tools into the tool router
// at node initialization rather than hard-coding. This will allow for using whatever
// embedding model the user desires in the future.
lazy_static! {
    static ref RUST_TOOLS: Vec<RustTool> = vec![
        RustTool::new(
            "Send Message".to_string(),
            "Enables sending messages to other identities over the Shinkai network. Shinkai identities start with two @ signs, like @@bob.shinkai".to_string(),
            vec![],
            vec![],
            Embedding::new("", vec![-0.038305745, 0.046385545, -0.037788823, -0.014481484, -0.051502712, -0.06013813, 0.13221301, -0.092736855, 0.04200833, -0.043960076, 0.0035095273, 0.0049898247, 0.0065435227, 0.011995108, 0.12102717, 0.05963151, 0.01071017, -0.011772111, 0.0239527, -0.04471714, 0.01621528, 0.003893963, 0.026154544, 0.025358945, 0.089226365, -0.120550744, -0.027054314, 0.044116586, -0.034818146, -0.075985126, 0.079937056, 0.100899175, 0.032488704, -0.048571702, -0.080863856, 0.053923238, 0.016655888, -0.031858332, -0.052031144, -0.045143753, -0.099302396, 0.005774999, -0.018096734, 0.020827424, 0.039511327, 0.02277451, -0.017634643, -0.00077144336, -0.015723605, 0.019519394, 0.006633065, 0.0050234334, 0.068824455, 0.060249496, 0.04650712, -0.052944012, 0.02110764, 0.09149785, -0.0005958773, 0.047875762, 0.010691698, -0.025657311, -0.021029253, -0.010868452, -0.013603435, -0.028860865, -0.045729384, 0.034779496, -0.009440995, -0.023847781, -0.060657892, -0.0037252512, -0.066632494, 0.034331236, -0.028067218, 0.026730597, 0.007891866, -0.03716074, -0.065807, 0.08479557, -0.09143397, -0.023824168, 0.00992865, -0.0016769437, 0.05568052, 0.027481683, 0.0077425838, -0.031285062, 0.018867105, 0.06112163, 0.053856567, 0.028481156, 0.03570358, -0.0347418, 0.03341708, -0.005030333, 0.019866848, -0.026991704, -0.048125625, 0.124542475, -0.0105808275, -0.07169612, 0.013428718, -0.041989166, -0.00034828804, -0.03466269, -0.05105071, -0.0030936387, 0.033872508, -0.008040463, 0.00074571883, -0.060018994, -0.01608232, 0.041701447, 0.007633972, -0.0064545865, -0.015731117, 0.0045028217, 0.033144284, -0.0055606123, 0.07040795, 0.02181561, -0.09387747, -0.04484095, -0.0076197884, -0.004693312, -0.022387229, -0.015069822, 0.1160646, 0.058326602, 0.0025266474, 0.043046482, -0.06822439, 0.009110914, -0.058148976, -0.030244991, -0.05544721, 0.0030383943, 0.018058246, 0.0025741155, 0.052669905, 0.031468563, 0.05298522, 0.05015822, 0.03062318, -0.063740894, 0.030563405, 0.0117963, 0.0043661, 0.062427163, -0.022451457, 0.004771707, 0.07298076, 0.057489492, -0.043839313, -0.01672199, 0.010951649, 0.048135534, 0.026439684, 0.053032804, 0.10240236, 0.030382162, -0.035409592, -0.02782032, 0.026958799, -0.09773873, -0.085868865, 0.016418533, 0.0843319, -0.08083885, -0.056468338, 0.08507105, -0.059997015, 0.009188499, -0.07173098, -0.0060126493, 0.021913027, -0.02653837, -0.094251655, 0.044066332, 0.049842194, -0.0076496755, 0.066745065, -0.030980287, -0.03450862, -0.054031786, -0.026323933, 0.01929915, -0.043824345, -0.024038881, 0.014922107, -0.0071532507, -0.04283773, -0.048117954, -0.044854786, -0.056592718, -0.084654614, -0.09795405, -0.026568359, 0.013215808, -0.051734585, 0.049008437, 0.06166836, 0.013866077, 0.046323057, -0.05804425, -0.04672053, 0.054177023, -0.008198312, 0.05275211, 0.02087, 0.127632, 0.0042871498, 0.0009468489, 0.025968434, -0.0025798886, -0.0024598774, 0.0017864491, -0.03401362, 0.03543937, 0.043149486, 0.034244582, -0.10325866, -3.245797e-33, -0.04572625, -0.020719787, -0.085083224, -0.024956256, -0.00049001345, -0.060940035, 0.14156625, -0.0016483249, 0.07863196, 0.049342763, -0.09076265, -0.009622502, 0.023534408, 0.0441159, 0.051122237, -0.12993056, -0.0125222765, 0.04700145, -0.01415838, -0.025189763, 0.0033615625, -0.015821094, 0.043316998, -0.006222439, -0.019703273, -0.063033506, 0.06761214, 0.006911362, -0.081905894, -0.016485631, -0.067292124, 0.08172393, 0.0529654, 0.060793348, -0.0011910073, -0.010916183, 0.04295201, -0.0228566, -0.011748034, 0.010050962, 0.065183535, 0.0064143753, 0.01507136, 0.07664829, 0.032497276, -0.0018694662, -0.074760914, 0.05338535, -0.08088787, -0.012417305, 0.025696179, -0.030205997, 0.020730289, -0.09069611, -0.038940612, -0.05466376, -0.02291974, -0.014865229, -0.0067167617, -0.03753464, 0.053570822, 0.01960253, 0.08195764, 0.028257884, 0.024973942, -0.05031929, 0.0374269, 0.054038923, 0.02918504, -0.019444942, 0.071822666, -0.07851882, 0.045054965, 0.010533049, 0.02328083, -0.12664257, -0.07840325, -0.06662722, -0.02557191, 0.03755562, 0.059545394, 0.0026273427, 0.02538857, -0.015955243, 0.045597196, -0.017643325, 0.058290653, 0.037226554, -0.0012108121, -0.027346585, 0.012242104, 0.011248777, -0.07187343, 0.0062730834, -0.025741974, 5.449951e-32, 0.088844016, -0.0960117, -0.030385891, -0.1219684, 0.019151537, 0.08673512, -0.028296161, -0.03253012, 0.012446862, -0.0034208603, -0.00021961408, 0.054535173, 0.03731666, -0.04809096, 0.0891624, -0.022114456, -0.0041370606, -0.08433844, -0.022170452, -0.064359196, 0.02268891, 0.024161529, -0.060601715, -0.012662584, -0.006421236, 0.014489694, -0.0094893435, 0.07170245, -0.15451725, -0.068884544, -0.058512207, -0.1152079, 0.0027881125, 0.06301475, -0.123679675, 0.06453345, -0.0066122995, -0.08248715, -0.022875102, 0.010910799, -0.10812466, -0.032113936, 0.058638677, -0.014667034, -0.051219076, 0.0869764, -0.008002626, -0.06487496, -0.019096188, 0.023166867, -0.020452045, 0.027288742, -0.014755112, 0.14164816, 0.0031154098, -0.004240052, 0.045121506, -0.07190391, 0.107481, 0.027461382, -0.04553388, 0.07692611, 0.008809729, -0.0112251965]),
        ),
        RustTool::new(
            "User Data Vector Search".to_string(),
            "Enables searching through all of a user's personal data/documents/books/etc. to find whatever you need to answer questions or use as inputs to other tools.".to_string(),
            vec![],
            vec![],
            Embedding::new("", vec![0.0102138985, -0.046363313, -0.0696546, 0.006008984, -0.03570599, -0.051045988, 0.07381421, 0.034123473, -0.0028727108, 0.022764433, 0.0437168, -0.022792261, 0.00087746984, -0.041601676, 0.0124117285, 0.04224065, 0.019946577, 0.056303408, 0.04510683, -0.06563554, 0.042440973, 0.011923578, -0.02876363, -0.038635716, -0.034442313, -0.02631236, -0.018900078, -0.06784957, -0.03468494, -0.036162965, 0.06742434, 0.12171248, 0.1266795, 0.004487104, 0.02461856, -0.0037007446, -0.007883809, 0.051360365, -0.05127176, -0.013471889, -0.030540386, -0.072526604, -0.06938756, 0.05873272, -0.050676227, 0.036052696, 0.023580655, -0.060042597, 0.009181041, 0.022100335, -0.07456877, 0.082033515, -0.022212798, 0.069049194, 0.13078658, 0.025214197, 0.078216024, -0.0599763, -0.09462269, -0.009916729, -0.037312333, 0.066183545, -0.056690294, 0.0033970769, 0.018002005, 0.026171755, -0.038883287, 0.058918856, 0.009552832, -0.057324555, -0.0025363886, 0.03496344, -0.037016418, 0.07111876, -0.057967022, -0.03848131, -0.04984828, -0.0467353, 0.12160493, -0.01614858, 0.03199425, 0.122329906, -0.01943743, -0.053615183, 0.0643575, -0.019986162, -0.050174057, -0.06493076, 0.019727945, 0.03936015, 0.02501904, -0.010778582, 0.07213344, -0.012491402, 0.02302989, 0.05696403, 0.0010688256, -0.033771284, 0.08968648, 0.050797362, 0.016128981, 0.0422034, -0.0008728729, -0.018847981, 0.024488237, 0.07376998, -0.017244564, -0.008298459, -0.007587751, -0.0665124, 0.05283439, -0.019899197, -0.006727281, -0.051328536, 0.0673634, -0.07120547, -0.060258187, 0.06069142, -0.11835365, 0.040408403, -0.023342159, -0.067979045, 0.009779606, 0.049280047, 0.042182866, -0.018703694, -0.03725695, 0.017412469, 0.096213125, -0.0051410845, 0.015382339, 0.061164644, -0.10959752, 0.054537997, -0.040763102, 0.05042864, -0.067360066, -0.06824343, 0.020759223, 0.09091994, 0.0040483936, 0.10842036, 0.057865884, 0.05146683, -0.0043540597, 0.043448243, -0.07849139, -0.121874556, -0.013998062, -0.058818694, 0.04373005, -0.020925915, 0.08150747, 0.08159814, 0.028764043, -0.03516511, -0.007325805, -0.006627517, -0.012704843, -0.017985038, -0.011294231, -0.009796656, -0.007498955, 0.011815886, -0.060962636, -0.016102398, -0.077425584, -0.035522394, 0.038372003, -0.06442796, 0.1335814, -0.015568556, -0.12430134, 0.03636198, -0.017337823, 0.047385506, -0.11549478, 0.01873801, 0.01987811, 0.02555686, 0.01296483, 0.019500334, 0.028950091, 0.030300424, -0.018081237, 0.01949088, 0.021126276, -0.00059122953, -0.022309255, 0.06564598, 0.0537001, -0.06704348, -0.07090784, -0.031625535, 0.004509602, -0.06052289, 0.027719216, 0.0023265902, -0.051994443, 0.056439925, -0.05660393, -0.08039965, -0.023689415, 0.021920662, 0.0014478703, -0.009816739, -0.060174152, -0.0076309023, 0.031170346, -0.049653508, -0.020242896, 0.08639553, 0.05255353, -0.043810282, 0.018452244, -0.13590525, -0.005661957, -0.02358466, -0.06050199, 0.04357955, 0.016682949, 0.008764098, -0.013568355, 7.9071516e-33, -0.06531629, -0.067370564, -0.026503695, 0.04252395, 0.06412896, 0.04249265, 0.099685185, -0.04820492, 0.061692066, -0.11270932, -0.058267437, 0.052373633, 0.062136874, -0.03193926, -0.05987085, 0.052330196, -0.06711366, -0.0676614, 0.04982364, 0.025262674, -0.020342687, -0.05294338, -0.018360417, 0.0045752153, 0.04598343, -0.029813427, 0.058783766, -0.0694951, 0.00798113, -0.04397381, -0.09515438, -0.0077823154, 0.0047906293, 0.027070217, -0.06665458, -0.01550851, 0.077530734, 0.005375793, 0.013629829, 0.06611191, 0.015639188, 0.03144076, -0.03831813, 0.025110671, -0.01664862, 0.02790656, -0.06915903, 0.08404511, 0.0103804795, 0.04825389, 0.044940002, -0.032996133, -0.065273724, -0.04050627, -0.05958196, 0.01722222, -0.008278511, -0.0004464281, 0.032575164, 0.050139274, -0.052444622, 0.0290671, 0.010422251, -0.008709403, -0.062235825, 0.022118125, 0.07972817, 0.028315807, -0.01402215, -0.07952399, 0.006108396, -0.072842404, 0.047232576, 0.018786868, 0.0027109643, 0.02190947, -0.0025998908, -0.056467887, -0.028024541, 0.0074659735, 0.05084602, 0.009842133, -0.006528902, 0.08046279, -0.01100509, 0.034886554, -0.03708859, 0.10029435, -0.0022316051, -0.0693378, 0.0067311022, -0.029665925, -0.02770075, 0.077438086, 0.065936245, 3.7876323e-32, -0.043969337, 0.034517903, -0.050530974, -0.026440166, 0.12165506, 0.024386698, 0.0026942578, 0.023933964, 0.0047466583, -0.04147515, 0.04794137, 0.0003258289, -0.020368777, 0.0035100821, 0.07829128, 0.039718248, 0.051703047, -0.041926317, -0.05607809, -0.0995032, 0.06363762, 0.041834433, -0.079591006, 0.06159645, 0.09831356, -0.0039153597, -0.009047434, 0.05903357, -0.04350877, -0.02030302, -0.020737788, 0.019078974, 0.022023, 0.044829257, 0.05614639, 0.06147227, 0.017907014, -0.07102417, -0.100551695, 0.03737285, 0.036777947, -0.093206264, 0.038093172, -0.036582183, -0.06925422, 0.052557983, 0.011293322, -0.03636203, 0.024432303, -0.08739477, 0.0006209641, -0.010777401, 0.04619681, 0.07332601, 0.0030900938, -0.032490138, -0.0006500011, -0.032911394, 0.056579683, 0.018584836, -0.054659933, 0.015410144, -0.085247576, -0.07027707]),
        ),
    ];
    pub static ref RUST_TOOLKIT: RustToolkit = {
        let mut map = HashMap::new();
        for tool in RUST_TOOLS.iter() {
            map.insert(tool.name.clone(), tool.clone());
        }
        RustToolkit { rust_tool_map: map }
    };
}

#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct RustToolkit {
    pub rust_tool_map: HashMap<String, RustTool>,
}

impl RustToolkit {
    pub fn get_tool(&self, name: &str) -> Result<&RustTool, ToolError> {
        self.rust_tool_map
            .get(name)
            .ok_or(ToolError::ToolNotFound(name.to_string()))
    }

    pub fn toolkit_type_name() -> String {
        "rust_toolkit".to_string()
    }
}

#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct RustTool {
    pub name: String,
    pub description: String,
    pub input_args: Vec<ToolArgument>,
    pub output_args: Vec<ToolArgument>,
    pub tool_embedding: Embedding,
}

impl RustTool {
    pub fn new(
        name: String,
        description: String,
        input_args: Vec<ToolArgument>,
        output_args: Vec<ToolArgument>,
        tool_embedding: Embedding,
    ) -> Self {
        Self {
            name: name.replace(" ", "_"),
            description,
            input_args,
            output_args,
            tool_embedding,
        }
    }

    /// Default name of the rust toolkit
    pub fn toolkit_type_name(&self) -> String {
        RustToolkit::toolkit_type_name()
    }

    // Default name of the rust toolkit
    pub fn ebnf_inputs(&self, add_arg_descriptions: bool) -> String {
        RustToolkit::toolkit_type_name()
    }

    /// Convert to json
    pub fn to_json(&self) -> Result<String, ToolError> {
        serde_json::to_string(self).map_err(|_| ToolError::FailedJSONParsing)
    }

    /// Convert from json
    pub fn from_json(json: &str) -> Result<Self, ToolError> {
        let deserialized: Self = serde_json::from_str(json)?;
        Ok(deserialized)
    }
}

/// TODO: Implement Rust Tool Execution logic on the executor .
/// This is needed because we can't serialize functions into JSON, and so
/// the ToolRouter won't work otherwise.
pub struct RustToolExecutor {}
// pub run_tool: Box<dyn Fn(JsonValue) -> Result<JsonValue, ToolError> + Send + Sync>,
